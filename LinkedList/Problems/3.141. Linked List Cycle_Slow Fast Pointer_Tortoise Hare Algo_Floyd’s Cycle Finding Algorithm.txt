// 141. Linked List Cycle
// https://leetcode.com/problems/linked-list-cycle/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

 // Complexity : O(n)
 // https://www.geeksforgeeks.org/floyds-cycle-finding-algorithm/
 // https://cp-algorithms.com/others/tortoise_and_hare.html

 /*
public class Solution {
    public boolean hasCycle(ListNode head) {

        if(head == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head.next;

        while(slow != fast) {
            if(fast == null || fast.next == null) {
                return false;
            }

            slow = slow.next;
            fast = fast.next.next;
        }

        return true;
    }
}
*/








// Approach - 01 : SLow and Fast pointer / Tortoise and Hare Algorithm / Floyd's Cycle Detection Algorithm
/*
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) {
            return false;
        }

        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast) {
                return true;
            }
        }

        return false;
    }
}
*/









// Approach - 02 : Using HashSet
public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) {
            return false;
        }

        HashSet<ListNode> visited = new HashSet<>();
        ListNode curr = head;

        while(curr != null) {
            if(visited.contains(curr)) {  // It means cycle exits
            return true;
            }

            visited.add(curr);
            curr = curr.next;
        }
        return false;
    }
}