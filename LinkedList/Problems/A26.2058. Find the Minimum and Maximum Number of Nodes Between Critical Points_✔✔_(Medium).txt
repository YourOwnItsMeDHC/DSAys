/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        // If the list has less than 3 nodes, return [-1, -1]
        if (head == null || head.next == null || head.next.next == null) {
            return new int[]{-1, -1};
        }

        List<Integer> criticalPoints = new ArrayList<>(); // List to store the positions of critical points
        int pos = 1; // Position counter starting from 1 as per problem statement
        ListNode prev = head; // Initialize prev as head
        ListNode curr = head.next; // Initialize curr as the second node
        ListNode next = curr.next; // Initialize next as the third node
        
        // Traverse the list until next is null
        while (next != null) {
            // Check if curr is a local maximum or local minimum
            if ((curr.val > prev.val && curr.val > next.val) || (curr.val < prev.val && curr.val < next.val)) {
                criticalPoints.add(pos); // Add the position to criticalPoints list
            }
            // Move the pointers one step forward
            prev = curr;
            curr = next;
            next = next.next;
            pos++;
        }
        
        // If less than 2 critical points are found, return [-1, -1]
        if (criticalPoints.size() < 2) {
            return new int[]{-1, -1};
        }

        int minDist = Integer.MAX_VALUE; // Initialize minDist to a large value
        int maxDist = criticalPoints.get(criticalPoints.size() - 1) - criticalPoints.get(0); // Calculate maxDist

        // Calculate minDist between consecutive critical points
        for (int i = 1; i < criticalPoints.size(); i++) {
            minDist = Math.min(minDist, criticalPoints.get(i) - criticalPoints.get(i - 1));
        }
        
        // Return the minimum and maximum distances
        return new int[]{minDist, maxDist};
    }
}


// Complexity Analysis
// Time Complexity: O(n), where n is the number of nodes in the linked list.
// This is because we traverse the list once to find critical points and
// once to compute distances.

// Space Complexity: O(k), where k is the number of critical points.
// This space is used to store the indices of critical points.








/*
Dry Run with a Longer Linked List:
Example List: 1 -> 3 -> 2 -> 5 -> 3 -> 8 -> 1 -> 6 -> 2 -> 7

1. Initial check passes as the list has more than 3 nodes.

2. Start traversing the list with the following pointers and positions:
   - prev = 1 (pos = 0)
   - curr = 3 (pos = 1)
   - next = 2 (pos = 2)

3. First iteration:
   - curr (3) > prev (1) and curr (3) > next (2) -> local maximum at pos 1.
   - criticalPoints = [1]
   - Move pointers: prev = 3, curr = 2, next = 5, pos = 2

4. Second iteration:
   - curr (2) < prev (3) and curr (2) < next (5) -> local minimum at pos 2.
   - criticalPoints = [1, 2]
   - Move pointers: prev = 2, curr = 5, next = 3, pos = 3

5. Third iteration:
   - curr (5) > prev (2) and curr (5) > next (3) -> local maximum at pos 3.
   - criticalPoints = [1, 2, 3]
   - Move pointers: prev = 5, curr = 3, next = 8, pos = 4

6. Fourth iteration:
   - curr (3) < prev (5) and curr (3) < next (8) -> local minimum at pos 4.
   - criticalPoints = [1, 2, 3, 4]
   - Move pointers: prev = 3, curr = 8, next = 1, pos = 5

7. Fifth iteration:
   - curr (8) > prev (3) and curr (8) > next (1) -> local maximum at pos 5.
   - criticalPoints = [1, 2, 3, 4, 5]
   - Move pointers: prev = 8, curr = 1, next = 6, pos = 6

8. Sixth iteration:
   - curr (1) < prev (8) and curr (1) < next (6) -> local minimum at pos 6.
   - criticalPoints = [1, 2, 3, 4, 5, 6]
   - Move pointers: prev = 1, curr = 6, next = 2, pos = 7

9. Seventh iteration:
   - curr (6) > prev (1) and curr (6) > next (2) -> local maximum at pos 7.
   - criticalPoints = [1, 2, 3, 4, 5, 6, 7]
   - Move pointers: prev = 6, curr = 2, next = 7, pos = 8

10. Eighth iteration:
   - curr (2) < prev (6) and curr (2) < next (7) -> local minimum at pos 8.
   - criticalPoints = [1, 2, 3, 4, 5, 6, 7, 8]
   - Move pointers: prev = 2, curr = 7, next = null, pos = 9

11. End of traversal:
    - criticalPoints = [1, 2, 3, 4, 5, 6, 7, 8]

12. Calculate maxDist:
    - maxDist = 8 - 1 = 7

13. Calculate minDist:
    - minDist = min(2-1, 3-2, 4-3, 5-4, 6-5, 7-6, 8-7) = 1

14. Return [1, 7] as the output.
*/