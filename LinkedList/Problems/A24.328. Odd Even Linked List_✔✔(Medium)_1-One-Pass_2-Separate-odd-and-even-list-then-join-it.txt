/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

// Approach - 01 : Brute Force

// Steps
// Traverse the linked list and extract all odd-indexed nodes into a separate list.
// Traverse the linked list again and extract all even-indexed nodes into another list.
// Combine the odd-indexed list and the even-indexed list.

// class Solution {
//     public ListNode oddEvenList(ListNode head) {
//         if(head == null) return head;
//         ListNode oddDummy = new ListNode(0);
//         ListNode evenDummy = new ListNode(0);
//         ListNode odd = oddDummy, even = evenDummy;
//         ListNode curr = head;

//         int i = 1;
//         while(curr != null) {
//             if(i % 2 != 0) {               // Generate the odd indices list
//                 odd.next = curr;
//                 odd = odd.next;
//             }
//             else {                         // Generate the even indices list
//                 even.next = curr;
//                 even = even.next;
//             }

//             curr = curr.next;
//             i++;
//         }

//         even.next = null;  // There should not be any node after even tail
//         odd.next = evenDummy.next;  // Join even list after the odd list
//         return oddDummy.next;
//     }
// }

// Complexity
// Time Complexity: O(n) - where n is the number of nodes in the linked list.
// Space Complexity: O(1) - no extra space used apart from a few pointers.

// Dry Run
// Consider the list 1 -> 2 -> 3 -> 4 -> 5:

// Odd list: 1 -> 3 -> 5
// Even list: 2 -> 4
// Combined: 1 -> 3 -> 5 -> 2 -> 4

















// Must check - 54
// At 54, also check the reason for "while" till 2nd last node only

// Approach 2: Optimized In-Place

// Steps
// Use two pointers, odd and even, starting at the first and second nodes respectively.

// Rearrange the nodes by adjusting the next pointers:
// odd.next should point to even.next.
// Move odd to odd.next.
// even.next should point to odd.next.
// Move even to even.next.
// Continue until all nodes are processed.
// Link the end of the odd list to the head of the even list.

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head == null || head.next == null) return head;

        ListNode odd = head, even = head.next, evenHead = even;

        while(even != null && even.next != null) { // It means, go till 2nd last node
            odd.next = even.next;
            odd = odd.next;

            even.next = odd.next;
            even = even.next;            
        }

        odd.next = evenHead;
        return head;
    }
}

// The condition even.next != null ensures that the loop runs only until the
// second-to-last node of the list. This is because even.next represents the
// next node in the sequence, and if even.next is null, it means even is
// pointing to the last node. Let's explain this step by step:

// even != null: Ensures that the current even node is not null.
// If even is null, it means we have processed all the nodes in the list.

// even.next != null: Ensures that there is a node after the current even node.
// If even.next is null, it means the current even node is the last node in the list.

// So, the loop condition while (even != null && even.next != null) ensures
// that we have at least two nodes left to process (one for odd and one for even).
// When even.next is null, we are at the second-to-last node, and we don't
// proceed further because there wouldn't be a pair of nodes to process.



// Complexity
// Time Complexity: O(n) - where n is the number of nodes in the linked list.
// Space Complexity: O(1) - no extra space used.

// Dry Run
// Consider the list 1 -> 2 -> 3 -> 4 -> 5:

// Initial: odd = 1, even = 2
// First iteration: odd = 3, even = 4
// Second iteration: odd = 5, even = null
// Result: 1 -> 3 -> 5 -> 2 -> 4

// Conclusion
// The brute force approach is simple but involves extra space.
// The optimized in-place approach is more efficient, with constant space complexity and linear time complexity.
// For real-world applications, the optimized in-place approach is preferred.