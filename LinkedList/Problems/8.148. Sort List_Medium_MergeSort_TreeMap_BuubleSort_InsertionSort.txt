/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

// Approach 01 : Merge Sort
class Solution {
    public ListNode sortList(ListNode head) {
        // If no element or one element is there
        if(head == null || head.next == null) {
            return head;
        }

        ListNode mid = getMid(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);

        return merge(left, right);
    }

    public ListNode merge(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode();
        ListNode tail = dummy;
        while(list1 != null && list2 != null) {
            if(list1.val < list2.val) {
                tail.next = list1;
                list1 = list1.next;
            }
            else {
                tail.next = list2;
                list2 = list2.next;
            }
            tail = tail.next;
        }
        tail.next = (list1 != null) ? list1 : list2;
        return dummy.next;
    }


     public ListNode getMid(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;

        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode mid = slow.next;
        slow.next = null;
        return mid;
    }
}


//     Steps for getMid() method :

// 1.
// Initialize Two Pointers:

// slow starts at the head of the list.
// fast starts at the second node (head.next).

// 2.
// Advance the Pointers:

// Move slow one step at a time.
// Move fast two steps at a time.
// This continues until fast reaches the end of the list or there are no more pairs
// of nodes for fast to process.

// 3.
// Identify the Middle:

// When the loop exits, slow will be at the node just before the middle of the list.
// mid is set to slow.next, which is the actual middle node.

// 4.
// Split the List:

// slow.next = null; effectively cuts the list into two halves.
// The first half starts from head and ends at slow.
// The second half starts from mid and goes to the end of the list.
// Why slow.next = null;?
// The assignment slow.next = null; is necessary to break the link between
// the first half and the second half of the list. Without this step, the two halves
// would still be connected, and you wouldn't have two separate lists to sort
// independently. This step ensures that after the middle node (mid),
// there is no reference back to the previous part of the list, effectively
// creating two disjoint sublists.













// Approach 2: Insertion Sort - Acceted But not Submitted - TLE

// https://github.com/YourOwnItsMeDHC/DSA-Let-s-Fire-/blob/master/Sorting/Insertion%20Sort/Basics/src/com/company/InsertionSort.java
// https://www.geeksforgeeks.org/insertion-sort/

// Insertion Sort is similar to sorting playing cards in your hands.
// You take one card at a time and insert it into the correct position in the
// already sorted part of your hand.

// Steps:

// 1. Start with the first element: It's already sorted.

// 2. Insert the next element: Compare it with the elements in the sorted part and
//    place it in the correct position.

// 3. Repeat until all elements are sorted.

// Dry Run Example:
// Let's sort the list 4 -> 2 -> 1 -> 3.

// Start with 4 (already sorted): 4

// Insert 2:
// Compare 2 with 4: 2 is smaller.
// New list: 2 -> 4

// Insert 1:
// Compare 1 with 2: 1 is smaller.
// New list: 1 -> 2 -> 4

// Insert 3:
// Compare 3 with 1, 2, and 4.
// Place 3 between 2 and 4.

// New list: 1 -> 2 -> 3 -> 4

class Solution {
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode dummy = new ListNode(0); // Dummy node to serve as the head of the sorted list
        ListNode current = head; // Pointer to traverse the original list

        while (current != null) {
            ListNode prev = dummy; // Pointer to traverse the sorted part of the list
            ListNode nextNode = current.next; // Save the next node in the original list

            // Find the correct position to insert the current node in the sorted list
            while (prev.next != null && prev.next.val < current.val) {
                prev = prev.next;
            }

            // Insert the current node after prev
            current.next = prev.next;
            prev.next = current;

            // Move to the next node in the original list
            current = nextNode;
        }

        return dummy.next; // Return the sorted list starting from dummy.next
    }
}


// Summary:

// Merge Sort: Divide the list into halves, sort each half, and then merge them
// back together. Efficient for large lists, O(n log n) time complexity.

// Insertion Sort: Insert each element into its correct position in the sorted
// part of the list. Simple but less efficient for large lists, O(n^2) time complexity.

// Both methods will give you a sorted linked list, but Merge Sort is generally
// preferred for its efficiency.














// Approach - 03 : Bubble Sort (check these as well)













// Approach - 04 : TreeMap
 class Solution {
    public ListNode sortList(ListNode head) {
        Map<Integer, ListNode> map = new TreeMap<>();

        ListNode curr = head;

        while(curr != null) {
            // Checking for duplicates
            // If duplicates found, instead of adding it onto the map
            // I will add that duplicate node into the chain of the existing node
            if(map.containsKey(curr.val)) {
                ListNode temp = map.get(curr.val);
                while(temp.next != null && temp.next.val == curr.val) {
                    temp = temp.next;
                }
                temp.next = new ListNode(curr.val);
            }
            else {
                map.put(curr.val, new ListNode(curr.val));
            }
            curr = curr.next;
        }

        ListNode dummy = new ListNode();
        ListNode tail = head;

        for(Map.Entry<Integer, ListNode> entry : map.entrySet()) {
            tail.next = entry.getValue();

            // Might possible that I do have chain of duplicate nodes
            // So, will attach that as well
            while(tail.next != null) {
                tail = tail.next;
            }
        }

        return dummy.next;
    }
 }


// Dry Run Example with Duplicates
// Consider the linked list: 4 -> 2 -> 1 -> 3 -> 2 -> 4.

// Step-by-Step Process
// Original List:
// 4 -> 2 -> 1 -> 3 -> 2 -> 4

// Insert into TreeMap:

// Insert 4:
// TreeMap: {4 -> ListNode(4)}

// Insert 2:
// TreeMap: {2 -> ListNode(2), 4 -> ListNode(4)}

// Insert 1:
// TreeMap: {1 -> ListNode(1), 2 -> ListNode(2), 4 -> ListNode(4)}

// Insert 3:

// TreeMap: {1 -> ListNode(1), 2 -> ListNode(2), 3 -> ListNode(3), 4 -> ListNode(4)}

// Insert duplicate 2:
// Here, Node 2 already exists onto the TreeMap
// Find the last node with value 2 and append the new node.
// TreeMap: {1 -> ListNode(1), 2 -> ListNode(2 -> 2), 3 -> ListNode(3), 4 -> ListNode(4)}

// Insert duplicate 4:
// Find the last node with value 4 and append the new node.
// TreeMap: {1 -> ListNode(1), 2 -> ListNode(2 -> 2), 3 -> ListNode(3), 4 -> ListNode(4 -> 4)}

// Rebuilding the Sorted List:

// Start with dummy node.

// Add 1:
// dummy -> 1

// Add 2 and its duplicate:
// Here, we are adding node 2, and the chain of it's duplicates as well
// dummy -> 1 -> 2 -> 2

// Add 3:
// dummy -> 1 -> 2 -> 2 -> 3

// Add 4 and its duplicate:
// dummy -> 1 -> 2 -> 2 -> 3 -> 4 -> 4

// Final Sorted List:
// 1 -> 2 -> 2 -> 3 -> 4 -> 4 -> null


// Explanation of Duplicate Handling :

// When inserting a node into the TreeMap, if the value already exists:
// Retrieve the last node with the same value.
// Append the new node to the end of this chain.
// This ensures that all nodes, even duplicates, are included in the sorted list.
